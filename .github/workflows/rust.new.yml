name: 🧪 Test and Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  check:
    name: Test and Build cr8s Containers
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: cr8s
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: secret
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgres://postgres:secret@localhost:5432/cr8s
      REDIS_URL: redis://localhost:6379
      CRATES_IO_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      CI: true

    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4

      - name: 🛠 Extract version from Cargo.toml
        id: get_version
        run: echo "version=$(awk -F'\"' '/^\s*version\s*=/ { print $2 }' Cargo.toml)" >> "$GITHUB_OUTPUT"

      - name: 🔧 Initialize database schema
        run: |
          # Use SQLx for schema initialization instead of Diesel migrations
          docker run --rm \
            --network host \
            -e DATABASE_URL="${{ env.DATABASE_URL }}" \
            -v "${{ github.workspace }}/scripts/sql:/sql" \
            postgres:15 \
            psql "${{ env.DATABASE_URL }}" -f /sql/db-init.sql

      - name: 🧪 Run comprehensive test suite
        run: |
          # Test both CLI and server binaries with full coverage
          docker build -t cr8s-test .
          docker run --rm \
            --network host \
            -e DATABASE_URL="${{ env.DATABASE_URL }}" \
            -e REDIS_URL="${{ env.REDIS_URL }}" \
            cr8s-test \
            bash -c "
              echo '🧪 Running CLI tests (19 tests)...' &&
              cargo test --bin cli --verbose &&
              echo '🧪 Running server tests (8 tests)...' &&
              cargo test --bin server --verbose &&
              echo '🧪 Running integration tests...' &&
              cargo test --verbose
            "

      - name: 🚀 Docker build both images (server/cli)
        run: |
          env scripts/build-images.sh

      - name: 🔑 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CR8S_GHCR_PAT }}

      - name: 📦 Push both images
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          echo "VERSION = $VERSION"
          echo "📦 Pushing cr8s-server:${VERSION} and cr8s-cli:${VERSION}..."
          docker push ghcr.io/johnbasrai/cr8s/cr8s-server:${VERSION}
          docker push ghcr.io/johnbasrai/cr8s/cr8s-cli:${VERSION}

      - name: 🏥 Health check smoke test
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          echo "🏥 Testing health endpoint..."
          docker run --rm \
            --network host \
            -e DATABASE_URL="${{ env.DATABASE_URL }}" \
            -e REDIS_URL="${{ env.REDIS_URL }}" \
            ghcr.io/johnbasrai/cr8s/cr8s-server:${VERSION} &
          
          # Wait for server startup
          sleep 10
          
          # Test health endpoint
          curl -f http://localhost:8000/health || exit 1
          echo "✅ Health check passed"

      - name: 🧪 CLI functionality test
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          echo "🧪 Testing CLI binary..."
          docker run --rm \
            --network host \
            -e DATABASE_URL="${{ env.DATABASE_URL }}" \
            ghcr.io/johnbasrai/cr8s/cr8s-cli:${VERSION} \
            --help
          echo "✅ CLI help command successful"
