name: Rust CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  DATABASE_URL: postgres://postgres:postgres@localhost:5432/app_db
  ROCKET_DATABASES: |
    {
      postgres={url=postgres://postgres:postgres@localhost:5432/app_db},
      redis={url=redis://localhost:6379}
    }

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: app_db
        ports: [5432:5432]
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:latest
        ports: [6379:6379]
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        components: clippy,rustfmt

    - name: Cache cargo registry and build artifacts
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Check rustfmt
      run: cargo fmt -- --check

    - name: Cargo audit (deny new advisories)
      uses: actions-rs/audit-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Install system dependencies
      run: sudo apt-get update && sudo apt-get install -y libpq-dev pkg-config

    - name: Install Diesel CLI
      run: cargo install diesel_cli --no-default-features --features postgres

    - name: Run Diesel migrations (diesel setup)
      run: diesel setup

    - name: Build
      run: cargo build --all-features --verbose

    - name: Run tests
      shell: bash
      run: |
        cargo run --bin server &
        SERVER_PID=$!
        sleep 3
        cargo test --all-features -- --test-threads=1
        kill $SERVER_PID
