name: Rust CI

# ────────────────────────────────────────────────
# Triggers
# ────────────────────────────────────────────────
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# ────────────────────────────────────────────────
# Global env (shared by all steps)
# ────────────────────────────────────────────────
env:
  CARGO_TERM_COLOR: always
  DATABASE_URL: postgres://postgres:postgres@localhost:5432/app_db
  ROCKET_DATABASES: |
    {
      postgres={url=postgres://postgres:postgres@localhost:5432/app_db},
      redis={url=redis://localhost:6379}
    }

jobs:
  test:
    runs-on: ubuntu-latest

    # ────────────────────────────────────────────
    # Service containers (PostgreSQL + Redis)
    # ────────────────────────────────────────────
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: app_db
        ports: [5432:5432]
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:latest
        ports: [6379:6379]
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    # 1 ─ Checkout code
    - uses: actions/checkout@v4

    # 2 ─ Install Rust toolchain + components
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        components: clippy,rustfmt

    # 3 ─ Speed up builds by caching registry + target/
    - name: Cache cargo registry and build artifacts
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    # 4 ─ System libs for Diesel (libpq)
    - name: Install system dependencies
      run: sudo apt-get update && sudo apt-get install -y libpq-dev pkg-config

    # 5 ─ Install Diesel CLI (PostgreSQL only)
    - name: Install Diesel CLI
      run: cargo install diesel_cli --no-default-features --features postgres

    # 6 ─ Prepare database schema (drops → recreates → migrates)
    - name: Run Diesel migrations
      run: diesel setup

    # 7 ─ Lint: Clippy (fails on warnings)
    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    # 8 ─ Formatting check
    - name: Check rustfmt
      run: cargo fmt -- --check

    # 9 ─ Build code
    - name: Build
      run: cargo build --all-features --verbose

    # 10 ─ Launch Rocket server in background & run tests
    - name: Run tests
      shell: bash
      run: |
        # Start server on 127.0.0.1:8000 (matches APP_HOST in tests)
        cargo run --bin server &
        SERVER_PID=$!
        # Give it a moment to start up
        sleep 3
        # Run test-suite (single thread avoids port contention)
        cargo test --all-features -- --test-threads=1 --verbose
        # Shut down server
        kill $SERVER_PID
